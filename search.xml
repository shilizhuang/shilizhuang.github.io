<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>vue2基础知识</title>
      <link href="/2022/07/22/vue03/"/>
      <url>/2022/07/22/vue03/</url>
      
        <content type="html"><![CDATA[<h3 id="vue组件"><a href="#vue组件" class="headerlink" title="vue组件"></a><code>vue</code>组件</h3><ol><li><p>组件之间的父子关系</p><p> 组件在被封装好了以后，彼此之间是相互独立的</p></li></ol><h4 id="vue组件的使用步骤"><a href="#vue组件的使用步骤" class="headerlink" title="vue组件的使用步骤"></a><code>vue</code>组件的使用步骤</h4><ol><li><p>导入组件</p> <pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> HelloWorld <span class="token keyword">from</span> <span class="token string">'./components/HelloWorld.vue'</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>在<code>compoents</code>节点下注册组件</p> <pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">&#123;</span>  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'App'</span><span class="token punctuation">,</span>  <span class="token literal-property property">components</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    HelloWorld  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>在template标签里面通过标签的形式使用组件</p> <pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>HelloWorld msg<span class="token operator">=</span><span class="token string">"Welcome to Your Vue.js App"</span><span class="token operator">/</span><span class="token operator">></span><span class="token comment">// 注意在componets节点下注册的子组件是私有组件，只能在当前组件中使用</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>注册全局组件</p> <pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 在main.js文件的script标签中，导入要注册的组件</span><span class="token keyword">import</span> left <span class="token keyword">from</span> <span class="token string">'@/componets/left.vue'</span><span class="token comment">// 使用Vue.componets()方法注册全局组件</span>Vue<span class="token punctuation">.</span><span class="token function">componets</span><span class="token punctuation">(</span><span class="token string">'Left'</span><span class="token punctuation">,</span>left<span class="token punctuation">)</span><span class="token comment">// 参数1 要注册的全局组件名</span><span class="token comment">// 参数2 导入的组件名</span><span class="token comment">// 在想要使用该全局组件的组件的template标签中使用就行了</span><span class="token operator">&lt;</span>Left<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>Left<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>组件的props</p><ul><li><p>props是组件的&#x3D;&#x3D;自定义属性&#x3D;&#x3D;，在封装通用组件的时候，合理地使用props可以极大的提高组件的复用性！</p>  <pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">&#123;</span>    <span class="token literal-property property">props</span><span class="token operator">:</span><span class="token punctuation">[</span><span class="token string">'init'</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>props自定义属性时如果不加<code>v-bind:props</code>，那么传入的值是字符串类型</p></li><li><p>props的值不能直接修改</p></li><li><p>props的默认值</p>  <pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 定义成数组形式的props是没有默认值的</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">&#123;</span>    <span class="token literal-property property">props</span><span class="token operator">:</span><span class="token punctuation">&#123;</span>        <span class="token literal-property property">init</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">default</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>props的type类型</p>  <pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">&#123;</span>    <span class="token literal-property property">props</span><span class="token operator">:</span><span class="token punctuation">&#123;</span>        <span class="token literal-property property">init</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>            <span class="token comment">//default选项指定init属性的默认值</span>            <span class="token keyword">default</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>            <span class="token comment">// type选项指定init属性的类型</span>            <span class="token literal-property property">type</span><span class="token operator">:</span> Number<span class="token punctuation">,</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>props的必填选项required</p>  <pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">&#123;</span>    <span class="token literal-property property">props</span><span class="token operator">:</span><span class="token punctuation">&#123;</span>        <span class="token literal-property property">init</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>            <span class="token comment">//default选项指定init属性的默认值</span>            <span class="token keyword">default</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>            <span class="token comment">// type选项指定init属性的类型</span>            <span class="token literal-property property">type</span><span class="token operator">:</span> Number<span class="token punctuation">,</span>            <span class="token comment">// required选择指定在使用该组件的时候props自定义属性为必填</span>            <span class="token literal-property property">required</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li></ol><h4 id="组件的样式冲突"><a href="#组件的样式冲突" class="headerlink" title="组件的样式冲突"></a>组件的样式冲突</h4><ol><li><p>冲突的根本原因</p><ul><li>组件的样式定义好了之后是全局生效的</li><li>只有一个<code>html</code>页面</li></ul></li><li><p>scoped解决样式冲突的底层原理</p><ul><li><p>在每个组件模板的每个标签中自动添加上一个自定义属性，然后通过属性选择器来定义样式</p></li><li><p>&#96;&#96;&#96;js</p>  <style scoped></style>  <pre class="line-numbers language-none"><code class="language-none">+ 使用&#x2F;deep&#x2F;修改子组件的样式如果需要修改第三方组件或者子组件的样式，则可以在样式表里的选择器前面加上&#x2F;deep&#x2F;&#96;&#96;&#96;css&#x2F;deep&#x2F; h5 &#123;    color: red&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li></ol><h4 id="生命周期"><a href="#生命周期" class="headerlink" title="生命周期"></a>生命周期</h4><p>​生命周期指的是一个组件从创建-&gt;运行-&gt;销毁的整个阶段</p><ul><li><p><code>vue</code>生命周期图例</p>  <img src="F:\前端\3. 第三阶段 Vue 开发\2.Vue2+Vue3全套教程\Vue2\视频\day4\day4\讲义\lifecycle.png" alt="lifecycle" style="zoom:50%;" /></li></ul><h5 id="生命周期函数"><a href="#生命周期函数" class="headerlink" title="生命周期函数"></a>生命周期函数</h5><ol><li><p>由<code>vue</code>框架提供的内置函数，会伴随组件的生命周期，自动按次序执行</p></li><li><p>生命周期函数类型</p><ul><li><p>创建阶段</p>  <pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> beforeCreate <span class="token operator">-</span><span class="token operator">></span> created <span class="token operator">-</span><span class="token operator">></span> beforeMount <span class="token operator">-</span><span class="token operator">></span> mounted<span class="token function">beforeCreate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">// 组件的props/data/methods尚未被创建，因此无法使用，此节点函数没有实际意义</span><span class="token function">created</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">// 组件的props/data/methods创建完毕，可以使用，但是组件模板结构尚未生成，此节点函数多用于ajax请求获取数据</span><span class="token function">beforeMount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">//准备将内存中编译好的HTML结构渲染到浏览器上，这个节点的函数也没有太大意义</span><span class="token function">mounted</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">//已成功将编译的HTML结构渲染到浏览器上了，此节点函数多用于操作DOM节点</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>运行阶段</p>  <pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">beforeUpdate <span class="token operator">-</span><span class="token operator">></span> updatedupdated<span class="token comment">//数据发生变化，updated函数可以获得最新的DOM节点</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>销毁阶段</p>  <pre class="line-numbers language-none"><code class="language-none">beforeDestroy -&gt; destroyed<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul></li></ol><h4 id="组件之间的数据共享"><a href="#组件之间的数据共享" class="headerlink" title="组件之间的数据共享"></a>组件之间的数据共享</h4><ol><li><p>组件之间的关系</p><ul><li><p>父子关系</p></li><li><p>兄弟关系</p></li></ul></li></ol><h5 id="父子之间的数据共享"><a href="#父子之间的数据共享" class="headerlink" title="父子之间的数据共享"></a>父子之间的数据共享</h5><p>父组件向子组件共享数据需要使用自定义属性</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 子组件中定义props属性用来接受父组件传递的值</span><span class="token keyword">export</span> <span class="token keyword">default</span><span class="token punctuation">&#123;</span>    <span class="token literal-property property">props</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>        <span class="token literal-property property">init</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>            <span class="token comment">// 设置自定义属性为必填属性</span>            <span class="token literal-property property">required</span><span class="token operator">:</span><span class="token punctuation">,</span>            <span class="token comment">// 设置自定义属性类型</span>            <span class="token literal-property property">type</span><span class="token operator">:</span> Number<span class="token punctuation">,</span>            <span class="token comment">// 设置自定义属性默认值</span>            <span class="token keyword">default</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>              <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="子组件向父组件共享数据"><a href="#子组件向父组件共享数据" class="headerlink" title="子组件向父组件共享数据"></a>子组件向父组件共享数据</h5><p>子组件向父组件共享数据通过自定义事件</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 子组件</span><span class="token keyword">export</span> <span class="token keyword">default</span><span class="token punctuation">&#123;</span>    <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>         <span class="token literal-property property">message</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token literal-property property">methods</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>        <span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>message<span class="token operator">++</span><span class="token punctuation">,</span>            <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">$emit</span><span class="token punctuation">(</span><span class="token string">'numChange'</span><span class="token punctuation">,</span><span class="token keyword">this</span><span class="token punctuation">.</span>message<span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">// 父组件</span><span class="token operator">&lt;</span>son @numChange<span class="token operator">=</span><span class="token string">"getNew"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>son<span class="token operator">></span><span class="token keyword">export</span> <span class="token keyword">default</span><span class="token punctuation">&#123;</span>    <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token literal-property property">mesFromSon</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token literal-property property">methods</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 通过val接受子组件的message</span>        <span class="token function">getNew</span><span class="token punctuation">(</span><span class="token parameter">val</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token comment">// 用父组件的mesFromSon来接受val</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>mesFromSon <span class="token operator">=</span> val        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="兄弟组件之间的数据共享"><a href="#兄弟组件之间的数据共享" class="headerlink" title="兄弟组件之间的数据共享"></a>兄弟组件之间的数据共享</h5><p>在<code>Vue2</code>的版本中，兄弟组件之间的数据共享方案是<code>EventBus</code></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 兄弟组件数据发送方</span><span class="token comment">// 导入一个新的vue实例对象</span><span class="token keyword">import</span> bus <span class="token keyword">from</span> <span class="token string">'./eventBus.js'</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">&#123;</span>    <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span><span class="token punctuation">&#123;</span>            <span class="token literal-property property">message</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token literal-property property">methods</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>        <span class="token function">sendMsg</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            bus<span class="token punctuation">.</span><span class="token function">$emit</span><span class="token punctuation">(</span><span class="token string">'share'</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>message<span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// eventBus.js</span><span class="token comment">// 导入vue构造函数</span><span class="token keyword">import</span> Vue <span class="token keyword">from</span> <span class="token string">'vue'</span><span class="token comment">// 向外共享vue的实例对象</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 兄弟组件 数据接收方</span><span class="token comment">// 导入一个新的vue实例对象</span><span class="token keyword">import</span> bus <span class="token keyword">from</span> <span class="token string">'./eventBus.js'</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">&#123;</span>    <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span><span class="token punctuation">&#123;</span>            <span class="token literal-property property">mesFromBro</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token function">created</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token comment">// 绑定兄弟组件里面的自定义事件</span>        bus<span class="token punctuation">.</span><span class="token function">$on</span><span class="token punctuation">(</span><span class="token string">'share'</span><span class="token punctuation">,</span> <span class="token parameter">val</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>mesFromBro <span class="token operator">=</span> val        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> vue2 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Markdown </tag>
            
            <tag> vue2 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue2基础知识</title>
      <link href="/2022/07/22/vue02/"/>
      <url>/2022/07/22/vue02/</url>
      
        <content type="html"><![CDATA[<h2 id="过滤器"><a href="#过滤器" class="headerlink" title="过滤器"></a>过滤器</h2><h4 id="什么是过滤器"><a href="#什么是过滤器" class="headerlink" title="什么是过滤器"></a>什么是过滤器</h4><p>​过滤器是<code>vue</code>为开发者提供的功能，常用于文本的格式化。过滤器可以用在两个地方：</p><p>​过滤器应该被添加到JavaScript表达式的尾部，由__管道符__进行调用</p><ul><li><p>插值表达式</p><ul><li>&#96;&#96;&#96;js   <!-- 通过管道符调用过滤器 --><pre><code>      &lt;p&gt;&#123;&#123;message | capi&#125;&#125;&lt;/p&gt;</code></pre>  <pre class="line-numbers language-none"><code class="language-none">+ v-bind属性绑定+ 注意，在&#96;vue3&#96;中过滤器已被移除+ 过滤器的声明必须在filters节点下+ &#96;&#96;&#96;jsfilters: &#123;                &#x2F;&#x2F; 过滤器函数中的形参val永远代表管道符|前面的值                capi(val) &#123;                    let newStr &#x3D; val.toUpperCase()                    return newStr                &#125;,            &#125;#### 私有过滤器<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li><li><p>私有过滤器</p></li></ul><p>​在filters节点下定义的过滤器函数就是私有过滤器，只能在当前<code>vue</code>实例中起效</p><ul><li><p>全局过滤器</p><p>  可以在多个<code>vue</code>实例中共享的过滤器</p>  <pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 定义全局过滤器</span>        <span class="token comment">// Vue.filter()方法定义的过滤器独立于vue实例，不同的vue实例都可以使用</span>        <span class="token comment">// vue.filter()方法需要传递两个参数，第一个是过滤器函数名，第二个是处理函数</span>        <span class="token comment">// str参数代表管道符前的数据</span>        Vue<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token string">'capi'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">str</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">let</span> first <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token keyword">let</span> other <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> first <span class="token operator">+</span> other        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>  如果全局过滤器和私有过滤器名字重复，<code>vue</code>实例对象会根据就近原则调用私有过滤器，可以连续调用多个过滤器，过滤器可以进行传参，但是第一个参数默认是管道符前面的数据</p></li></ul><h4 id="侦听器"><a href="#侦听器" class="headerlink" title="侦听器"></a>侦听器</h4><ul><li><p>侦听器watch是用来监视数据的变化，并针对数据的变化作出特定的操作</p><p>  语法格式如下：</p>  <pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 侦听器</span>        <span class="token literal-property property">watch</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>            <span class="token comment">// 侦听username的变化</span>            <span class="token comment">// newVal是变化后的值，oldVal是是原来的值</span>            <span class="token function">username</span><span class="token punctuation">(</span><span class="token parameter">newVal<span class="token punctuation">,</span> oldVal</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>newVal<span class="token punctuation">,</span> oldVal<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h5 id="侦听器的格式"><a href="#侦听器的格式" class="headerlink" title="侦听器的格式"></a>侦听器的格式</h5><ol><li><p>方法格式的侦听器</p><ul><li>缺点：无法在刚进入页面的时候自动触发</li><li>缺点2：如果侦听的是一个对象，对象里面的属性发生变化，侦听器不会触发</li></ul></li><li><p>对象格式的侦听器</p><ul><li><p>优点：可以通过<strong>immediate</strong>选项，让侦听器自动触发</p></li><li><p>可以通过deep选项让侦听器进行深度侦听</p></li><li><p>&#96;&#96;&#96;js<br>  username: {<br>              &#x2F;&#x2F; 侦听器的处理函数<br>              handler(newVal) {<br>                  console.log(newVal);<br>              },<br>              &#x2F;&#x2F; immediate选项的默认值是false，true是让处理函数自动触发一次<br>              immediate: true,<br>          }<br>   &#x2F;&#x2F; 如果要侦听具体的对象属性，则要在外套一层单引号<br>          ‘info.name’: {<br>              handler(newVal) {<br>                  console.log(newVal);<br>              },<br>              deep: true,<br>          }</p>  <pre class="line-numbers language-none"><code class="language-none">​##### 计算属性特点： 1. 定义的时候要定义成**方法**2. 在使用计算属性的时候，当成普通的属性使用即可好处： 1. 实现了代码复用2. 只要计算属性中依赖的数据源变化了，则计算属性会自动重新求值实例： &#96;&#96;&#96;js&#x2F;&#x2F; 计算属性必须定义咋computed节点下      computed: &#123;        rgb() &#123;          return &#96;rgb($&#123;this.r&#125;,$&#123;this.g&#125;,$&#123;this.b&#125;)&#96;        &#125;,      &#125;,<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li></ol><h5 id="axios"><a href="#axios" class="headerlink" title="axios"></a><code>axios</code></h5><ol><li><p>调用<code>axios</code>返回的是<code>primise</code>的对象</p></li><li><p><code>axios</code>得到数据后会在真实数据外层套上一层配置</p></li><li><p><code>axios</code>get请求</p> <pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 调用axios</span>       <span class="token function">axios</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>           <span class="token literal-property property">methods</span><span class="token operator">:</span> <span class="token string">'GET'</span><span class="token punctuation">,</span>           <span class="token literal-property property">url</span><span class="token operator">:</span> <span class="token string">'http://liulongbin.top:3006/api/getbooks'</span><span class="token punctuation">,</span>           <span class="token comment">// 查询参数</span>           <span class="token literal-property property">params</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>               <span class="token literal-property property">id</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>           <span class="token punctuation">&#125;</span>       <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">res</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>           console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span>       <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>只要是<code>primise</code>实例对象，都可以在前面添加await await只能用在<code>async</code>修饰的方法中</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'#btn'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span> <span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token comment">// 只要是primise实例都可以在前面修饰await,也就是异步任务可以进行等待</span>            <span class="token keyword">await</span> <span class="token function">axios</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>                <span class="token literal-property property">method</span><span class="token operator">:</span> <span class="token string">'POST'</span><span class="token punctuation">,</span>                <span class="token literal-property property">url</span><span class="token operator">:</span> <span class="token string">'http://liulongbin.top:3006/api/post'</span><span class="token punctuation">,</span>                <span class="token comment">// 请求体参数</span>                <span class="token literal-property property">data</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>                    <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'zs'</span><span class="token punctuation">,</span>                    <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">14</span><span class="token punctuation">,</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">res</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>解构赋值</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 只要是primise实例都可以在前面修饰await,也就是异步任务可以进行等待</span>            <span class="token comment">// 解构赋值，可以使用:重命名</span>            <span class="token keyword">const</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">data</span><span class="token operator">:</span> body <span class="token punctuation">&#125;</span> <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">axios</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>                <span class="token literal-property property">method</span><span class="token operator">:</span> <span class="token string">'POST'</span><span class="token punctuation">,</span>                <span class="token literal-property property">url</span><span class="token operator">:</span> <span class="token string">'http://liulongbin.top:3006/api/post'</span><span class="token punctuation">,</span>                <span class="token comment">// 请求体参数</span>                <span class="token literal-property property">data</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>                    <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'zs'</span><span class="token punctuation">,</span>                    <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">14</span><span class="token punctuation">,</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h4 id="vue-cli的使用"><a href="#vue-cli的使用" class="headerlink" title="vue-cli的使用"></a><code>vue-cli</code>的使用</h4><ol><li><p>在终端下使用一下命令，创建指定项目</p> <pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">vue create demo<span class="token operator">-</span>first<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p> <img src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20220703085737387.png" alt="image-20220703085737387"></p><p> 建议在开发过程中选择第三项手动配置需要安装的功能</p></li><li><p>选择要安装的功能</p><p><img src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20220703090814184.png"></p></li><li><p><code>vue</code>项目<code>src</code>目录的构成</p><pre class="line-numbers language-none"><code class="language-none">assets 文件夹：存放项目中用到的静态资源文件comments 文件夹：程序员封装的、可复用的组件main.js 是项目的入口文件。整个项目的运行，都要先执行main.jsapp.vue 是项目的根组件<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><code>vue</code>项目的运行流程</p><p> 将<code>app.vue</code>里面的内容通过<code>main.js</code>渲染到<code>index.html</code>的指定区域,</p><p> $mount()方法和el属性的效果是一样的</p></li><li><p><code>vue</code>组件</p><ul><li><p>template：组件的模板解构</p></li><li><p>script：组件的<strong>js</strong>行为</p><p>  组件里面的script标签里面必须写export default()默认导出，固定写法，</p><p>  定义数据data必须是函数</p></li><li><p>style：组件的样式</p></li></ul></li></ol>]]></content>
      
      
      <categories>
          
          <category> vue2 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Markdown </tag>
            
            <tag> vue2 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue2基础知识</title>
      <link href="/2022/07/22/vue01/"/>
      <url>/2022/07/22/vue01/</url>
      
        <content type="html"><![CDATA[<h3 id="推荐大家安装的-VScode-中的-Vue-插件"><a href="#推荐大家安装的-VScode-中的-Vue-插件" class="headerlink" title="推荐大家安装的 VScode 中的 Vue 插件"></a>推荐大家安装的 VScode 中的 Vue 插件</h3><ol><li>Vue 3 Snippets     <a href="https://marketplace.visualstudio.com/items?itemName=hollowtree.vue-snippets">https://marketplace.visualstudio.com/items?itemName=hollowtree.vue-snippets</a></li><li>Vetur                    <a href="https://marketplace.visualstudio.com/items?itemName=octref.vetur">https://marketplace.visualstudio.com/items?itemName=octref.vetur</a></li></ol><h3 id="什么是-vue"><a href="#什么是-vue" class="headerlink" title="什么是 vue"></a>什么是 vue</h3><ol><li>构建用户界面<ul><li>用 vue 往 html 页面中填充数据，非常的方便</li></ul></li><li>框架<ul><li>框架是一套现成的解决方案，程序员只能遵守框架的规范，去编写自己的业务功能！</li><li>要学习 vue，就是在学习 vue 框架中规定的用法！</li><li>vue 的指令、组件（是对 UI 结构的复用）、路由、Vuex、vue 组件库</li><li>只有把上面老师罗列的内容掌握以后，才有开发 vue 项目的能力！</li></ul></li></ol><h3 id="vue-的两个特性"><a href="#vue-的两个特性" class="headerlink" title="vue 的两个特性"></a>vue 的两个特性</h3><ol><li><p>数据驱动视图：</p><ul><li>数据的变化<strong>会驱动视图</strong>自动更新</li><li>好处：程序员只管把数据维护好，那么页面结构会被 vue 自动渲染出来！</li></ul></li><li><p>双向数据绑定：</p><blockquote><p>在网页中，form 表单负责<strong>采集数据</strong>，Ajax 负责<strong>提交数据</strong>。</p></blockquote><ul><li>js 数据的变化，会被自动渲染到页面上</li><li>页面上表单采集的数据发生变化的时候，会被 vue 自动获取到，并更新到 js 数据中</li></ul></li></ol><blockquote><p>注意：数据驱动视图和双向数据绑定的底层原理是 MVVM（Mode 数据源、View 视图、ViewModel 就是 vue 的实例）</p></blockquote><h3 id="vue-指令"><a href="#vue-指令" class="headerlink" title="vue 指令"></a>vue 指令</h3><h4 id="1-内容渲染指令"><a href="#1-内容渲染指令" class="headerlink" title="1. 内容渲染指令"></a>1. 内容渲染指令</h4><ol><li><code>v-text</code> 指令的缺点：会覆盖元素内部原有的内容！</li><li><code>&#123;&#123; &#125;&#125;</code> 插值表达式：在实际开发中用的最多，只是内容的占位符，不会覆盖原有的内容！</li><li><code>v-html</code> 指令的作用：可以把带有标签的字符串，渲染成真正的 HTML 内容！</li></ol><h4 id="2-属性绑定指令"><a href="#2-属性绑定指令" class="headerlink" title="2. 属性绑定指令"></a>2. 属性绑定指令</h4><blockquote><p> 注意：插值表达式只能用在元素的<strong>内容节点</strong>中，不能用在元素的<strong>属性节点</strong>中！</p></blockquote><ul><li><p>在 vue 中，可以使用 <code>v-bind:</code> 指令，为元素的属性动态绑定值；</p></li><li><p>简写是英文的 <code>:</code></p></li><li><p>在使用 v-bind 属性绑定期间，如果绑定内容需要进行动态拼接，则字符串的外面应该包裹单引号，例如：</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">:title</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">'</span>box<span class="token punctuation">'</span> + index<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>这是一个 div<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul><h4 id="3-事件绑定"><a href="#3-事件绑定" class="headerlink" title="3. 事件绑定"></a>3. 事件绑定</h4><ol><li><p><code>v-on:</code> 简写是 <code>@</code></p></li><li><p>语法格式为：</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>add<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>methods: &#123;   add() &#123;// 如果在方法中要修改 data 中的数据，可以通过 this 访问到this.count += 1   &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><code>$event</code> 的应用场景：如果默认的事件对象 e 被覆盖了，则可以手动传递一个  $event。例如：</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>add(3, $event)<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>methods: &#123;   add(n, e) &#123;// 如果在方法中要修改 data 中的数据，可以通过 this 访问到this.count += 1   &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>事件修饰符：</p><ul><li><p><code>.prevent</code></p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">@click.prevent</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>xxx<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>链接<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p><code>.stop</code></p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click.stop</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>xxx<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>按钮<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul></li></ol><h4 id="4-v-model-指令"><a href="#4-v-model-指令" class="headerlink" title="4. v-model 指令"></a>4. v-model 指令</h4><ol><li>input 输入框<ul><li>type&#x3D;”radio”</li><li>type&#x3D;”checkbox”</li><li>type&#x3D;”xxxx”</li></ul></li><li>textarea</li><li>select</li></ol><h4 id="5-条件渲染指令"><a href="#5-条件渲染指令" class="headerlink" title="5. 条件渲染指令"></a>5. 条件渲染指令</h4><ol><li><code>v-show</code> 的原理是：动态为元素添加或移除 <code>display: none</code> 样式，来实现元素的显示和隐藏<ul><li>如果要频繁的切换元素的显示状态，用 v-show 性能会更好</li></ul></li><li><code>v-if</code> 的原理是：每次动态创建或移除元素，实现元素的显示和隐藏<ul><li>如果刚进入页面的时候，某些元素默认不需要被展示，而且后期这个元素很可能也不需要被展示出来，此时 v-if 性能更好</li></ul></li></ol><blockquote><p> 在实际开发中，绝大多数情况，不用考虑性能问题，直接使用 v-if 就好了！！！</p></blockquote><p>v-if 指令在使用的时候，有两种方式：</p><ol><li><p>直接给定一个布尔值 true 或 false</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">v-if</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>被 v-if 控制的元素<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>给 v-if 提供一个判断条件，根据判断的结果是 true 或 false，来控制元素的显示和隐藏</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">v-if</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>type === <span class="token punctuation">'</span>A<span class="token punctuation">'</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>良好<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ol>]]></content>
      
      
      <categories>
          
          <category> vue2 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Markdown </tag>
            
            <tag> vue2 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DOM节点和BOM节点</title>
      <link href="/2022/07/22/web-apis-di-yi-tian/"/>
      <url>/2022/07/22/web-apis-di-yi-tian/</url>
      
        <content type="html"><![CDATA[<h3 id="什么是DOM？"><a href="#什么是DOM？" class="headerlink" title="什么是DOM？"></a>什么是DOM？</h3><ul><li>DOM就是文档对象模型，用来呈现以及和交互任意HTML或XML文档的API</li><li>DOM用来开发网页特效和实现人机交互</li></ul><h3 id="DOM树"><a href="#DOM树" class="headerlink" title="DOM树"></a>DOM树</h3><ul><li>将HTML文档结构通过树状结构直观的表现出来，就叫DOM树</li><li>描述网页内容结构的名词</li><li>作用：文档树直观的体现了标签与标签之间的关系</li></ul><h3 id="DOM对象（重要）"><a href="#DOM对象（重要）" class="headerlink" title="DOM对象（重要）"></a>DOM对象（重要）</h3><ul><li>DOM对象：浏览器根据html标签生成的 JS对象<ul><li>所有的标签属性都可以在这个对象上面找到</li><li>修改这个对象的属性会自动映射到标签身上</li></ul></li><li>DOM的核心思想<ul><li>把网页内容当做对象来处理</li></ul></li><li>document 对象<ul><li>是 DOM 里提供的一个对象</li><li>所以它提供的属性和方法都是用来访问和操作网页内容的</li><li>例：document.write()</li><li>网页所有内容都在document里面</li></ul></li></ul><h3 id="获取DOM对象"><a href="#获取DOM对象" class="headerlink" title="获取DOM对象"></a>获取DOM对象</h3><ul><li><p>根据css选择器来获取</p><pre class="line-numbers language-none"><code class="language-none">let 变量名 &#x3D; document.querySelecter(&#39;css选择器&#39;) <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这种方法只能匹配到第一个符合条件的元素，如果没匹配到就返回null</p><pre class="line-numbers language-none"><code class="language-none">let 变量名 &#x3D; document.querySelecterAll()<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>返回匹配到的nodelist对象集合，这个集合是一个伪数组，想要对集合里面的对象进行操作的话得先遍历集合或者通过下标来获取集合里面的对象</p></li><li><p>其他方法来获取</p><p>  <img src="C:\Users\ADMINI~1\AppData\Local\Temp\1654050133218.png" alt="65405013321"></p></li></ul><h3 id="设置-x2F-修改DOM元素内容有哪3钟方式？"><a href="#设置-x2F-修改DOM元素内容有哪3钟方式？" class="headerlink" title="设置&#x2F;修改DOM元素内容有哪3钟方式？"></a>设置&#x2F;修改DOM元素内容有哪3钟方式？</h3><ul><li>document.write() 方法</li><li>元素.innerText 属性</li><li>元素.innerHTML 属性</li></ul><h3 id="三者的区别是什么？"><a href="#三者的区别是什么？" class="headerlink" title="三者的区别是什么？"></a>三者的区别是什么？</h3><ul><li>document.write() 方法 只能追加到body中 </li><li>元素.innerText 属性 只识别内容，不能解析标签</li><li>元素.innerHTML 属性 能够解析标签</li><li>如果还在纠结到底用谁，你可以选择innerHTML</li></ul><h3 id="修改对象属性"><a href="#修改对象属性" class="headerlink" title="修改对象属性"></a>修改对象属性</h3><ul><li>修改自身属性</li></ul><p>​对象名.属性名 &#x3D; ‘属性值’</p><ul><li><p>修改样式属性</p><p>  对象名.style.属性名 &#x3D; ‘属性值’</p><p>  还可以先给类名设置样式属性，设置好了之后给对象添加类名来修改对象样式属性</p><p>  对象名.className &#x3D; ‘类名’ 这种方法添加的类名会覆盖原有的类名</p><ul><li><p>追加一个类</p><p>  对象名.classNameList.add(‘类名’)</p></li><li><p>删除一个类</p><p>  对象名.classNameList.remove(‘类名’)</p></li><li><p>切换一个类</p><p>  对象名.classNameList.toggle(‘类名’)</p></li></ul></li></ul><h3 id="修改表单元素属性"><a href="#修改表单元素属性" class="headerlink" title="修改表单元素属性"></a>修改表单元素属性</h3><p>​表单对象.属性名 &#x3D; ‘属性值’</p><p>​表单元素中一些属性值用布尔值来表示，true代表添加，false代表删除，例如：disabled、checked、selected</p><h3 id="定时器-间歇函数"><a href="#定时器-间歇函数" class="headerlink" title="定时器-间歇函数"></a>定时器-间歇函数</h3><ol><li><p>定时器函数有什么作用？</p><p> 可以根据时间自动重复执行某些代码</p></li><li><p>定时器函数如何开启？</p><p> setInterval(函数名, 时间)</p></li><li><p>定时器函数如何关闭？</p><p> clearInerval(定时器变量名)</p></li></ol><p>​</p>]]></content>
      
      
      <categories>
          
          <category> javascript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
            <tag> Markdown </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DOM节点和BOM节点</title>
      <link href="/2022/07/22/web-apis-di-er-tian/"/>
      <url>/2022/07/22/web-apis-di-er-tian/</url>
      
        <content type="html"><![CDATA[<h4 id="什么是事件？"><a href="#什么是事件？" class="headerlink" title="什么是事件？"></a>什么是事件？</h4><p>​事件就是在编程过程中系统内发生的动作或者事情，例如鼠标经过、点击、离开等等</p><h4 id="什么是事件监听？"><a href="#什么是事件监听？" class="headerlink" title="什么是事件监听？"></a>什么是事件监听？</h4><p>​事件监听就是让程序检测是否有事件发生，如果有，就调用一个函数做出响应，也叫注册事件</p><h4 id="语法："><a href="#语法：" class="headerlink" title="语法："></a>语法：</h4><p>​元素.addEventListener(‘事件’, 要执行的函数)</p><h4 id="事件监听三要素："><a href="#事件监听三要素：" class="headerlink" title="事件监听三要素："></a>事件监听三要素：</h4><ol><li>事件源，那个DOM元素被触发了，就获取那个DOM元素</li><li>事件，用什么方式触发的</li><li>事件调用函数，DOM元素触发了之后要做什么事</li></ol><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">例如：    给button按钮添加了一个事件监听，当点击按钮的时候浏览器会弹出一个消息    <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">let btn = document.querySelector('button')        btn.addEventListener('click', function () &#123;            alert('点了一下')        &#125;)</span><span class="token template-punctuation string">`</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">拓展：绑定事件监听，这种写法也可以添加事件监听    事件源<span class="token punctuation">.</span><span class="token function-variable function">on事件</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span> 例如：    <span class="token keyword">let</span> btn <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'button'</span><span class="token punctuation">)</span>    btn<span class="token punctuation">.</span><span class="token function-variable function">onclick</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'检测到事件'</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="事件类型："><a href="#事件类型：" class="headerlink" title="事件类型："></a>事件类型：</h4><ol><li><p>鼠标事件</p><ol><li>鼠标点击 click</li><li>鼠标经过 mouseenter</li><li>鼠标离开 mouseleave</li><li>鼠标移动 mousemove</li><li>鼠标双击 dblclick</li></ol></li><li><p>表单事件</p></li></ol><p>  获得焦点 focus</p><p>  失去焦点 blur</p><p>  表单value值发生变化 changet</p><p>  表单提交 submit</p><ol start="3"><li><p>键盘事件</p><p> 键盘按下触发 keydown</p><p> 键盘抬起触发 keyup</p></li><li><p>文本事件</p><p> 用户输入事件 input</p></li><li><p>滚动事件</p><p>   屏幕滚动 scroll</p></li><li><p>加载事件</p><p>  页面加载 window.addEventListener(‘load’, function(){})</p><p>   DOM内容加载事件 DOMContentLoade</p></li><li><p>重置事件</p><p> 元素大小发生变化时候触发</p></li></ol><pre class="line-numbers language-none"><code class="language-none">i++ 和 i &#x3D; i + 1 不一样，当i是数字时没有区别，但是当i是字符串的时候，i++会把i转换成数字,而i &#x3D; i + 1则是字符串拼接<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="高阶函数："><a href="#高阶函数：" class="headerlink" title="高阶函数："></a>高阶函数：</h4><ul><li><p>函数表达式</p><ul><li><p>函数可以作为值来进行参数传递</p>  <pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> <span class="token function-variable function">fn</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token comment">/*这就是一个函数表达式*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>  ​</p></li></ul></li><li><p>回调函数</p><ul><li><p>被作为参数传递的函数就叫回调函数</p>  <pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">btn<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'这就是一个回调函数'</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>  ​</p></li></ul></li></ul><h4 id="环境对象："><a href="#环境对象：" class="headerlink" title="环境对象："></a>环境对象：</h4><ul><li><p>什么是环境对象？</p><p>  环境对象是函数内部特殊的变量this，它指向当前函数运行时所指向的环境</p></li><li><p>环境对象有什么用？</p><p>  明白this的指向之后我们可以使代码更清晰简洁</p><p>  谁调用this，this就指向谁。</p><p>  ​</p></li></ul><h4 id="编程思想-排他思想"><a href="#编程思想-排他思想" class="headerlink" title="编程思想-排他思想"></a>编程思想-排他思想</h4><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> btnList <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelectorAll</span><span class="token punctuation">(</span><span class="token string">'button'</span><span class="token punctuation">)</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> btnList<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    btnList<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//排他思想最重要的就是先排除数组里的所有元素属性或者样式</span>        <span class="token comment">/*for (let j = 0; j &lt; btnList.length; j++) &#123;            btnList[j].classList.remove('pink')        &#125;*/</span>        <span class="token comment">//我们也可以通过查找第一个有pink类的对象来删除Pink类，这样就不用循环减少了代码复杂度</span>        document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'.pink'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>classList<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token string">'pink'</span><span class="token punctuation">)</span>        <span class="token comment">//然后再通过this让自己添加属性或者样式</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>classList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">'pink'</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> javascript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
            <tag> Markdown </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
